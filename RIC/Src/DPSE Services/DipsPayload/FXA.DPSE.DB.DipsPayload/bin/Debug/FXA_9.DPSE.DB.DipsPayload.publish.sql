/*
Deployment script for FXA.DPSE.DB.DipsPayload

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "FXA.DPSE.DB.DipsPayload"
:setvar DefaultFilePrefix "FXA.DPSE.DB.DipsPayload"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[Payloads].[IsLocked] on table [dbo].[Payloads] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Payloads])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping [dbo].[FK_Payload]...';


GO
ALTER TABLE [dbo].[PayloadCheques] DROP CONSTRAINT [FK_Payload];


GO
PRINT N'Dropping [dbo].[FK_ChannelType]...';


GO
ALTER TABLE [dbo].[Payloads] DROP CONSTRAINT [FK_ChannelType];


GO
PRINT N'Starting rebuilding table [dbo].[Payloads]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Payloads] (
    [Id]                  BIGINT          IDENTITY (1, 1) NOT NULL,
    [TransactionId]       BIGINT          NOT NULL,
    [ChannelTypeId]       BIGINT          NOT NULL,
    [DateTimeCreated]     DATETIME        NOT NULL,
    [RelativePath]        NVARCHAR (1000) NOT NULL,
    [IsLocked]            BIT             NOT NULL,
    [DateTimeLocked]      DATETIME        NULL,
    [IsTransported]       BIT             NOT NULL,
    [DateTimeTransported] DATETIME        NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Payloads])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Payloads] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Payloads] ([Id], [TransactionId], [ChannelTypeId], [DateTimeCreated], [RelativePath], [IsTransported], [DateTimeTransported])
        SELECT   [Id],
                 [TransactionId],
                 [ChannelTypeId],
                 [DateTimeCreated],
                 [RelativePath],
                 [IsTransported],
                 [DateTimeTransported]
        FROM     [dbo].[Payloads]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Payloads] OFF;
    END

DROP TABLE [dbo].[Payloads];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Payloads]', N'Payloads';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[FK_Payload]...';


GO
ALTER TABLE [dbo].[PayloadCheques] WITH NOCHECK
    ADD CONSTRAINT [FK_Payload] FOREIGN KEY ([PayloadId]) REFERENCES [dbo].[Payloads] ([Id]);


GO
PRINT N'Creating [dbo].[FK_ChannelType]...';


GO
ALTER TABLE [dbo].[Payloads] WITH NOCHECK
    ADD CONSTRAINT [FK_ChannelType] FOREIGN KEY ([ChannelTypeId]) REFERENCES [dbo].[ChannelTypes] ([Id]);


GO
----------------------------------------------------------------------------
--- Seed Table : ChannelTypes
----------------------------------------------------------------------------

IF NOT EXISTS(Select * From ChannelTypes Where Name = 'Mobile')
BEGIN
  Insert Into ChannelTypes Values ('Mobile')
END
GO

IF NOT EXISTS(Select * From ChannelTypes Where Name = 'ATM')
BEGIN
  Insert Into ChannelTypes Values ('ATM')
END
GO

----------------------------------------------------------------------------

----------------------------------------------------------------------------
--- Seed Table : Payloads & PayloadCheques (Temp, Only For Testing)
----------------------------------------------------------------------------

IF NOT EXISTS(Select * From Payloads Where IsTransported = 0)
BEGIN
  Declare @PayloadId bigint
  Insert Into Payloads Values ((Select isnull(max(TransactionId), 0) From Payloads) + 1, 1, GETDATE(), '\Payloads\Payload1', 0, NULL)
  Set @PayloadId = @@Identity
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  

  Insert Into Payloads Values ((Select isnull(max(TransactionId), 0) From Payloads) + 1, 1, GETDATE(), '\Payloads\Payload2', 0, NULL)
  Set @PayloadId = @@Identity
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
  Insert Into PayloadCheques Values (@PayloadId, (Select isnull(max(ReferenceTrackingNumber), 0) From PayloadCheques) + 1)
END
GO

----------------------------------------------------------------------------
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[PayloadCheques] WITH CHECK CHECK CONSTRAINT [FK_Payload];

ALTER TABLE [dbo].[Payloads] WITH CHECK CHECK CONSTRAINT [FK_ChannelType];


GO
PRINT N'Update complete.';


GO
