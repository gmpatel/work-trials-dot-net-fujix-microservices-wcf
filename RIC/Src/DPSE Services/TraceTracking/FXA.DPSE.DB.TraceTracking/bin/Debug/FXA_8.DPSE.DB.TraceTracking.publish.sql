/*
Deployment script for FXA.DPSE.DB.TraceTracking

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "FXA.DPSE.DB.TraceTracking"
:setvar DefaultFilePrefix "FXA.DPSE.DB.TraceTracking"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE object_id = OBJECT_ID(N'[dbo].[fn_LeftPad]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
  DROP FUNCTION [dbo].[fn_LeftPad]
END
GO

CREATE FUNCTION [dbo].[fn_LeftPad]
(
	@String NVARCHAR(MAX), -- Initial string
	@TargetLength INT,     -- Size of final string
	@Pad CHAR              -- Pad character
) RETURNS NVARCHAR(MAX)
AS
BEGIN
	RETURN ISNULL(REPLICATE(@Pad, @TargetLength - LEN(@String)), '') + @String
END
GO

IF EXISTS (SELECT * FROM DBO.SYSOBJECTS WHERE Name = 'Trigger_GenerateChequeTraceTrackingCode' AND type = 'TR')
BEGIN
  DROP TRIGGER [dbo].[Trigger_GenerateChequeTraceTrackingCode]
END
GO

CREATE TRIGGER [dbo].[Trigger_GenerateChequeTraceTrackingCode] ON [dbo].[ElectronicTraceTrackingDetails] FOR INSERT AS
BEGIN
	declare @RowId bigint
	declare @ForeignRowId bigint
	declare @ChannelType varchar(50)
	declare @DateTimeCreated datetime2
	declare @ChequeTraceTrackingCode varchar(50)

	select @RowId = I.Id from Inserted I
	select @ForeignRowId = I.ElectronicTraceTrackingId from Inserted I
	select @ChannelType = ChannelType From ElectronicTraceTracking Where Id = @ForeignRowId	
	select @DateTimeCreated = DateTimeCreated From ElectronicTraceTracking Where Id = @ForeignRowId	
	
	set @ChequeTraceTrackingCode = 'NAB' + convert(NVARCHAR(8), @DateTimeCreated, 112) + CASE UPPER(@ChannelType) WHEN 'MCC' THEN '101' ELSE '100' END + [dbo].[fn_LeftPad](Convert(varchar(50), @RowId % 1000000), 6, 0)
	update ElectronicTraceTrackingDetails Set ChequeTraceTrackingCode = @ChequeTraceTrackingCode Where Id = @RowId

	print 'AFTER INSERT Trigger Fired : ChequeTraceTrackingCode = ' + @ChequeTraceTrackingCode + ', Id = ' + Convert(varchar(50), @RowId) + ', ForeignId = ' + Convert(varchar(50), @ForeignRowId)
END
GO

GO
PRINT N'Update complete.';


GO
